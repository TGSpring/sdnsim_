SDNSim Project Roadmap
Phase 1: Core Simulation (Current Phase)

Goal: Build the basic SDN simulator with device management, packet routing, and file-based topology.

Tasks:

Controller & Device Classes

Add/remove devices

Connect devices bidirectionally

Track neighbors

Set device active/inactive status

Add clearAllDevices() to reset network

Packet Simulation

sendPacket(src, dest, payload)

Verify both devices exist

Check active/inactive status

Ensure they are neighbors

Print logs for packet attempts

Topology Management

Load devices and connections from topology.txt

Support comments (#) and blank lines

Handle self-loops & duplicate connections

Optionally support device states (active/inactive) in the file

Move topology loading to a separate module (TopologyLoader) to simplify main.cpp

Print device neighbors after loading

Doxygen Documentation

Already done

Include full class and method documentation

Testing

Hard-coded network tests (for initial debug)

File-based topology tests

Validate packet sending in multiple scenarios

Ensure logging clearly shows device states and neighbors

Phase 2: GUI & Interaction

Goal: Make SDNSim interactive and user-friendly.

Tasks:

Basic GUI

Display network topology

Add/remove devices from GUI

Connect/disconnect devices visually

Show device active/inactive status

Network Controls

Buttons for:

Load topology file

Clear network

Run packet tests

Toggle device active/inactive

Visual Feedback

Highlight source/destination devices

Show packet flow (optional: animate)

Display logs in GUI rather than console

Phase 3: Fault Detection & Network Simulation

Goal: Simulate real network behavior and failures.

Tasks:

Fault Detection

Randomly mark devices as inactive

Simulate link failure

Log alerts when packets fail

Rerouting

Attempt alternate neighbor paths if direct link fails

Track packet success/failure

Statistics

Packets sent/received per device

Average delivery success

Failed packet logs

Phase 4: Advanced Features (Optional / Future)

Goal: Add intelligence and Web deployment.

AI/ML Integration

Predict optimal routing

Adaptive device state management

Learning-based network optimization

Web Deployment

Compile using WebAssembly (WASM)

Allow browser-based interaction

Integrate GUI in the web

Extended Topology

Multiple controllers

VLAN/subnet simulation

Larger network scalability tests

Plugin System

Support custom device types

Custom packet rules

Extend simulation logic without modifying core